panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
for(j - 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
panelid <- panelid + 1
}
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
panelid <- panelid + 1
}
df
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
panelid <- panelid + 1
}
df
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
panelid <- panelid + 1
}
df
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
for(j in 1:panels[i]){
print("start_index:")
print(start_index)
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
panelid <- panelid + 1
}
df
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
for(j in 1:panels[i]){
print("start_index:")
print(start_index)
print(df$panelid[start_index])
print("--")
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
panelid <- panelid + 1
}
df
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
df
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index:start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
df
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df
df$panelid[1] <- 1
df
df <- dataframe()
df <- data.frame()
df$panelid[1] <- 1
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df$panelid[1] <- 1
df
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
dfx <- data.frame(Row = 1:60)
dfx$panelid[1] <- 1
dfx
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df$panelid <- NA
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
# Print the dataframe
print(df)
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df$panelid <- 1
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
# Print the dataframe
print(df)
df[df$panelid == 3,]
df[df$panelid %in% 3,]
df[df$panelid %in% 3]
df[df$panelid == 3]
df$panelid==1
df$panelid==3
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df$panelid <- NA
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
# Print the dataframe
print(df)
na.omit(df)
na_cells <- which(df == "NA", arr.ind = TRUE)
na_cells
df <- apply(df, c(1, 2), function(x) ifelse(x == "NA", "", x))
df
df <- apply(df, c(1, 2), function(x) ifelse(x == "NA", "", x))
df
na_cells <- which(df == "NA", arr.ind = TRUE)
na_cells
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df$panelid <- 0
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
df$panelid[start_index] <- toString(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
# Print the dataframe
print(df)
unlist(df$panelid)
df$panelid
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df$panelid <- 0
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
df$panelid[start_index] <-  (c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
# Print the dataframe
print(df)
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df$panelid <- 0
df
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
df$panelid[start_index] <- list(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
# Print the dataframe
print(df)
for(k in 1:60){
print(df$panelid)
}
for(k in 1:60){
print(typeof(df$panelid))
}
for(k in 1:60){
print(unlist(df$panelid))
}
for(k in 1:60){
print(df$panelid[k])
}
for(k in 1:60){
print(typeof(df$panelid[k]))
}
for(k in 1:60){
tmp <- df$panelid[k]
print(any(2 %in% tmp))
}
for(k in 1:60){
tmp <- df$panelid[k]
print(tmp)
print(any(2 %in% tmp))
}
for(k in 1:60){
tmp <- df$panelid[k]
print(tmp)
print(any(2 %in% unlist(tmp)))
}
for(k in 1:60){
tmp <- df$panelid[k]
#print(tmp)
print(any(2 %in% unlist(tmp)))
}
length(df$panelid)
indx <- c()
for(k in 1:length(df$panelid)){
tmp <- df$panelid[k]
#print(tmp)
if(any(2 %in% unlist(tmp))){
indx <- c(indx, k)
}
}
indx
indx <- c()
for(k in 1:length(df$panelid)){
tmp <- df$panelid[k]
#print(tmp)
if(any(3 %in% unlist(tmp))){
indx <- c(indx, k)
}
}
indx
indx <- c()
for(k in 1:length(df$panelid)){
tmp <- df$panelid[k]
#print(tmp)
if(any(1 %in% unlist(tmp))){
indx <- c(indx, k)
}
}
indx
df$panelid
df
indx <- c()
for(k in 1:length(df$panelid)){
tmp <- df$panelid[k]
tmp <- tmp[tmp != 0]
#print(tmp)
if(any(1 %in% unlist(tmp))){
indx <- c(indx, k)
}
}
library(uc511)
library(uc511)
# Define the panels and panel_overlap vectors
n_panels <- c(20, 20, 20)
n_panel_overlap <- c(0, 4, 5)
result6 <- uc511::getBAS(shp.cant,
panels = n_panels,
panel_overlap = n_panel_overlap,
bb = bb)
library(uc511)
# Define the panels and panel_overlap vectors
n_panels <- c(20, 20, 20)
n_panel_overlap <- c(0, 4, 5)
result6 <- uc511::getBAS(shp.cant,
panels = n_panels,
panel_overlap = n_panel_overlap,
bb = bb)
result6$sample
BASoverlappedpanel <- result6$sample
BASoverlappedpanel
BASoverlappedpanel[1:20]
BASoverlappedpanel[1:20,]
BASoverlappedpanel$panel_id
library(uc511)
# Define the panels and panel_overlap vectors
n_panels <- c(20, 20, 20)
n_panel_overlap <- c(0, 4, 5)
result6 <- uc511::getBAS(shp.cant,
panels = n_panels,
panel_overlap = n_panel_overlap,
bb = bb)
BASoverlappedpanel <- result6$sample
BASoverlappedpanel$panel_id
BASoverlappedpanel
BASoverlappedpanel$panel_id
length(BASoverlappedpanel$panel_id)
# Assuming you have a dataframe df with 60 rows
# For demonstration, let's create a dataframe with a single column called 'Row'
df <- data.frame(Row = 1:60)
df$panelid <- 0
# Define the panels and panel_overlap vectors
panels <- c(20, 20, 20)
panel_overlap <- c(0, 4, 5)
# Initialize variables
panelid <- 1
start_index <- 1
for(i in 1:length(panels)){
start_index <- start_index - panel_overlap[i]
if(i == 1){
for(j in 1:panels[i]){
df$panelid[start_index] <- panelid
start_index <- start_index + 1
}
} else {
for(j in 1:panels[i]){
print(unlist(df$panelid[start_index]))
if(df$panelid[start_index] == 0){
print("just a zero.")
}
df$panelid[start_index] <- list(c(df$panelid[start_index], panelid))
start_index <- start_index + 1
}
}
panelid <- panelid + 1
}
library(uc511)
# Define the panels and panel_overlap vectors
n_panels <- c(20, 20, 20)
n_panel_overlap <- c(0, 4, 5)
result6 <- uc511::getBAS(shp.cant,
panels = n_panels,
panel_overlap = n_panel_overlap,
bb = bb)
BASoverlappedpanel <- result6$sample
olPanel1 <- getOverlappedPoints(BASoverlappedpanel, 1)
olPanel1
olPanel1 <- getOverlappedPoints(BASoverlappedpanel, 2)
olPanel1
olPanel1 <- getOverlappedPoints(BASoverlappedpanel, 3)
olPanel1
# create/update files in man directory
devtools::document()
