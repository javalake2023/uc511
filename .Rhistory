y = "Longitude",
title = "BAS sample from the Canterbury Region.")
# Stratified samples from BAS Master Samples.
strata <- c("Canterbury", "Otago", "Tasman")
n_strata <- c("Canterbury" = 20, "Otago" = 20, "Tasman" = 10)
shp.subset <- shp_file[shp_file[["NAME_1"]] %in% strata,]
bb.strata <- uc511::BoundingBox(shp = shp.subset)
result3 <- uc511::BAS(shapefile = shp.subset,
n = n_strata,
boundingbox = bb.strata,
stratum = "NAME_1")
BASMaster <- result3$sample
tasman_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Tasman",]
tasman_samp[1:3,]
# Stratified samples from BAS Master Samples.
set.seed(511)
strata <- c("Canterbury", "Otago", "Tasman")
n_strata <- c("Canterbury" = 20, "Otago" = 20, "Tasman" = 10)
shp.subset <- shp_file[shp_file[["NAME_1"]] %in% strata,]
bb.strata <- uc511::BoundingBox(shp = shp.subset)
result3 <- uc511::BAS(shapefile = shp.subset,
n = n_strata,
boundingbox = bb.strata,
stratum = "NAME_1")
BASMaster <- result3$sample
tasman_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Tasman",]
tasman_samp[1:3,]
cant_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Canterbury",]
otago_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Otago",]
tasman_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Tasman",]
# convert foreign object to an sf object for ggplot.
strat <- sf::st_as_sf(shp.subset, coords = c("longitude", "latitude"))
cant_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Canterbury",]
otago_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Otago",]
tasman_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Tasman",]
ggplot() +
geom_sf() +
geom_sf(data = strat, size = 4, shape = 23) +
geom_point(data = tasman_samp,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Tasman (n = 10)"),
stat = "sf_coordinates"
) +
geom_point(data = canterbury_samp,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Canterbury (n = 20)"),
stat = "sf_coordinates"
) +
geom_point(data = otago_samp,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Otage (n = 30)"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("blue", "red", "black"),
name = "Legend") +
labs(x = "Latitude",
y = "Longitude",
title = "Stratified samples from BAS master samples.")
canterbury_samp <- result3$sample[result3$sample[["NAME_1"]] %in% "Canterbury",]
ggplot() +
geom_sf() +
geom_sf(data = strat, size = 4, shape = 23) +
geom_point(data = tasman_samp,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Tasman (n = 10)"),
stat = "sf_coordinates"
) +
geom_point(data = canterbury_samp,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Canterbury (n = 20)"),
stat = "sf_coordinates"
) +
geom_point(data = otago_samp,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Otage (n = 30)"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("blue", "red", "black"),
name = "Legend") +
labs(x = "Latitude",
y = "Longitude",
title = "Stratified samples from BAS master samples.")
# The stratum sample sizes...
n_strata <- c("Canterbury" = 20, "Otago" = 30, "Tasman" = 20)
result4 <- uc511::BAS(shapefile = shp.subset,
n = n_strata,
boundingbox = bb.strata,
seeds = result$seed,
stratum = "NAME_1")
# Panel Designs from BAS Master Samples
set.seed(511)
# 20 survey sites for each of three panels.
n_panels <- c(20, 20, 20)
# generate samples for the non-overlapping panel design.
result5 <- uc511::BAS(shapefile = shp.cant,
panels = n_panels,
boundingbox = bb)
# save samples.
BASpanel <- result5$sample
BASpanel
panel_2 <- uc511::getPanel(BASpanel, 2)
panel_2 <- panel_2$sample
panel_2[1:3,]
panel_1 <- uc511::getPanel(BASpanel, 1)
panel_2 <- uc511::getPanel(BASpanel, 2)
panel_3 <- uc511::getPanel(BASpanel, 3)
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_point(data = panel_1$sample,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Panel-1 (n = 20)"),
stat = "sf_coordinates"
) +
geom_point(data = panel_2$sample,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Panel-2 (n = 20)"),
stat = "sf_coordinates"
) +
geom_point(data = panel_3$sample,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Panel-3 (n = 20)"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"black"),
name = "Panels") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Panel Design from BAS Master Sample")
# Define the panels and panel_overlap vectors.
n_panels <- c(20, 20, 20)
n_panel_overlap <- c(0, 5, 5)
# Panel overlaps are also possible...
set.seed(511)
# Define the panels and panel_overlap vectors.
n_panels <- c(20, 20, 20)
n_panel_overlap <- c(0, 5, 5)
# generate samples for the overlapping panel design.
result6 <- uc511::BAS(shapefile = shp.cant,
panels = n_panels,
panel_overlap = n_panel_overlap,
boundingbox = bb)
# save samples.
BASPanel <- result6$sample
BASPanel
panel_2 <- uc511::getPanel(BASpanel, 2)
panel_2 <- panel_2$sample
panel_2[1:3,]
#
# Halton Frame
#
set.seed(511)
#
# Halton Frame
#
set.seed(511)
result7 <- uc511::HaltonFrame(shapefile = shp.cant,
J = c(2, 1))
Frame <- result7$sample
# get data for the Halton frame.
hf_pts <- sf::st_cast(result7$hf.pts.shp, "POINT")
hf_pts <- sf::st_as_sf(hf_pts)
hf_pts$ID <- seq(1, length(hf_pts$x))
# plot1 : hf_pts - Halton frame over Canterbury Region.
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = hf_pts,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = hf_pts,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Ordered Grid over Bounding Box")
Frame <- result7$sample  # used for second plot.
# plot2 : cant_pts - Canterbury Region.
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = Frame,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = Frame,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame for Canterbury")
# The second example frame...
set.seed(511)
# the number of sample points we want returned.
n_samples <- 50
# The second example frame...
set.seed(511)
# the number of sample points we want returned.
n_samples <- 50
# the other parameter is bases, it defaults to c(2, 3)
result8 <- uc511::HaltonFrame(shapefile = shp.cant,
n = n_samples,
J = c(8, 5),
randomStart = FALSE)
# get our sample.
sample <- result8$sample
sample
# plot
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = sample[1:n_samples,],
size = 2,
aes(label = uc511SeqID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "Frame Order"),
stat = "sf_coordinates") +
geom_point(data = sample[1:n_samples,],
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "First 50 sites from Canterbury Halton Frame.")
# It is also possible...
set.seed(511)
n_samples <- 30
result9 <- uc511::HaltonFrame(shapefile = shp.cant,
n = n_samples,
J = c(7, 4),
randomStart = TRUE)
# get our sample. returns uc511SeqID in df.
SBsample <- result9$sample
# plot
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = SBsample,
size = 2,
aes(label = uc511SeqID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "Frame Order"),
stat = "sf_coordinates") +
geom_point(data = SBsample,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Spatially Balanced sample from Halton Frame.")
SBsample
#
# Panel Design from Halton Frame
#
panels <- c(20, 20, 20)
panel_overlap <- c(0, 5, 5)
# generate the sample.
result10 <- uc511::HaltonFrame(shapefile = shp.cant,
panels = panels,
panel_overlap = panel_overlap,
J = c(7, 4))
HaltonFramePanel <- result10$sample
panelid <- 1
panelid <- 1
SitesPanel_1 <- uc511::getPanel(HaltonFramePanel, panelid)
SitesPanel_1$sample
library(uc511)
# It is also possible...
set.seed(511)
n_samples <- 30
result9 <- uc511::HaltonFrame(shapefile = shp.cant,
n = n_samples,
J = c(7, 4),
randomStart = TRUE)
# get our sample. returns uc511SeqID in df.
SBsample <- result9$sample
# plot
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = SBsample,
size = 2,
aes(label = uc511SeqID,     # need to check this out.
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "Frame Order"),
stat = "sf_coordinates") +
geom_point(data = SBsample,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Spatially Balanced sample from Halton Frame.")
# create/update files in man directory
devtools::document()
#
# Halton Frame
#
set.seed(511)
result7 <- uc511::HaltonFrame(shapefile = shp.cant,
J = c(5, 4))
Frame <- result7$sample  # used for second plot.
# get data for the Halton frame.
hf_pts <- sf::st_cast(result7$hf.pts.shp, "POINT")
hf_pts <- sf::st_as_sf(hf_pts)
hf_pts$ID <- seq(1, length(hf_pts$x))
# plot1 : hf_pts - Halton frame over Canterbury Region.
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = hf_pts,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = hf_pts,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Ordered Grid over Bounding Box")
# plot2 : cant_pts - Canterbury Region.
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = Frame,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = Frame,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame for Canterbury")
library(uc511)
#
# Halton Frame
#
set.seed(511)
result7 <- uc511::HaltonFrame(shapefile = shp.cant,
J = c(5, 4))
library(uc511)
#
# Halton Frame
#
set.seed(511)
result7 <- uc511::HaltonFrame(shapefile = shp.cant,
J = c(5, 4))
Frame <- result7$sample  # used for second plot.
# get data for the Halton frame.
hf_pts <- sf::st_cast(result7$hf.pts.shp, "POINT")
hf_pts <- sf::st_as_sf(hf_pts)
hf_pts$ID <- seq(1, length(hf_pts$x))
# plot1 : hf_pts - Halton frame over Canterbury Region.
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = hf_pts,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = hf_pts,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Ordered Grid over Bounding Box")
hf_pts
library(uc511)
#
# Halton Frame
#
set.seed(511)
result7 <- uc511::HaltonFrame(shapefile = shp.cant,
J = c(5, 4))
Frame <- result7$sample  # used for second plot.
# get data for the Halton frame.
hf_pts <- sf::st_cast(result7$hf.pts.shp, "POINT")
hf_pts <- sf::st_as_sf(hf_pts)
hf_pts$ID <- seq(1, length(hf_pts$x))
# plot1 : hf_pts - Halton frame over Canterbury Region.
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = hf_pts,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = hf_pts,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Ordered Grid over Bounding Box")
# The second example frame...
set.seed(511)
# the number of sample points we want returned.
n_samples <- 50
# the other parameter is bases, it defaults to c(2, 3)
result8 <- uc511::HaltonFrame(shapefile = shp.cant,
n = n_samples,
J = c(8, 5),
randomStart = FALSE)
# get our sample. returns uc511SeqID in df.
sample <- result8$sample
# plot
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = sample[1:n_samples,],
size = 2,
aes(label = uc511SeqID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "Frame Order"),
stat = "sf_coordinates") +
geom_point(data = sample[1:n_samples,],
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "First 50 sites from Canterbury Halton Frame.")
