#print(HaltonIndex)
#print(table(HaltonIndex))
print("x1 len HaltonIndex:")
print(length(HaltonIndex))
#print("HaltonIndex[F[nF/2+1:nF]]:")
#print(HaltonIndex[F[((nF/2)+1):nF]])
HaltonIndex[F[((nF/2)+1):nF]] <- (BoxIndex + (I[2] - 1) * xlevel)
#print("BoxIndex + (I[2] - 1) * xlevel:")
#print(BoxIndex + (I[2] - 1) * xlevel)
#print("after HaltonIndex[F[nF/2+1:nF]]:")
#print(HaltonIndex[F[nF/2+1:nF]])
#print(" # 2 x1 table")
#print(HaltonIndex)
#print(table(HaltonIndex))
print("on exit len HaltonIndex:")
print(length(HaltonIndex))
return(HaltonIndex)
}
#
res <- Partition2023(pop, its)
x1split <- function(x1pts, HaltonIndex, BoxIndex, xlevel, x1Hpts) {
# Determine points in box
inBox <- which(HaltonIndex == BoxIndex)
x1pts <- x1pts[inBox]
# Randomly remove one point (if needed)
#F <- which(inBox == TRUE)
F <- inBox
nF <- base::length(F)
print("x1 BoxIndex:")
print(BoxIndex)
print("x1 nF:")
print(nF)
#if(nF == 0){ return(HaltonIndex) }
#print("(nF %% 2):")
#print((nF %% 2))
print("len(b4 x1pts):")
print(length(x1pts))
if ((nF %% 2) == 1) {
r <- sample(nF, 1)
HaltonIndex[F[r]] <- NA
F <- F[-r]
nF <- (nF - 1)
x1pts <- x1pts[-r]
}
print("len(af x1pts):")
print(length(x1pts))
#if(nF == 0){ return(HaltonIndex) }
# Partition and update Halton indices
x1sort <- order(x1pts)
F <- F[x1sort]
Hpt1 <- x1Hpts[(BoxIndex + 1)]
Hpt2 <- x1Hpts[(BoxIndex + 1 + xlevel)]
I <- order(c(Hpt1, Hpt2))
#print("HaltonIndex[F[1:nF/2]]:")
#print(HaltonIndex[F[1:(nF/2)]])
HaltonIndex[F[1:(nF/2)]] <- (BoxIndex + (I[1] - 1) * xlevel)
#print("x1 table")
#print(HaltonIndex)
#print(table(HaltonIndex))
#print("x1 len HaltonIndex:")
#print(length(HaltonIndex))
#print("HaltonIndex[F[nF/2+1:nF]]:")
#print(HaltonIndex[F[((nF/2)+1):nF]])
HaltonIndex[F[((nF/2)+1):nF]] <- (BoxIndex + (I[2] - 1) * xlevel)
#print("BoxIndex + (I[2] - 1) * xlevel:")
#print(BoxIndex + (I[2] - 1) * xlevel)
#print("after HaltonIndex[F[nF/2+1:nF]]:")
#print(HaltonIndex[F[nF/2+1:nF]])
#print(" # 2 x1 table")
#print(HaltonIndex)
#print(table(HaltonIndex))
#print("on exit len HaltonIndex:")
#print(length(HaltonIndex))
return(HaltonIndex)
}
#
res <- Partition2023(pop, its)
x1split <- function(x1pts, HaltonIndex, BoxIndex, xlevel, x1Hpts) {
# Determine points in box
inBox <- which(HaltonIndex == BoxIndex)
x1pts <- x1pts[inBox]
# Randomly remove one point (if needed)
#F <- which(inBox == TRUE)
F <- inBox
nF <- base::length(F)
print("x1 BoxIndex:")
print(BoxIndex)
print("x1 nF:")
print(nF)
#if(nF == 0){ return(HaltonIndex) }
#print("(nF %% 2):")
#print((nF %% 2))
print("len(b4 x1pts):")
print(length(x1pts))
if ((nF %% 2) == 1) {
r <- sample(nF, 1)
HaltonIndex[F[r]] <- NA
F <- F[-r]
nF <- (nF - 1)
x1pts <- x1pts[-r]
}
print("len(af x1pts):")
print(length(x1pts))
#if(nF == 0){ return(HaltonIndex) }
# Partition and update Halton indices
x1sort <- order(x1pts)
F <- F[x1sort]
Hpt1 <- x1Hpts[(BoxIndex + 1)]
Hpt2 <- x1Hpts[(BoxIndex + 1 + xlevel)]
I <- order(c(Hpt1, Hpt2))
#print("HaltonIndex[F[1:nF/2]]:")
#print(HaltonIndex[F[1:(nF/2)]])
HaltonIndex[F[1:(nF/2)]] <- (BoxIndex + (I[1] - 1) * xlevel)
#print("x1 table")
#print(HaltonIndex)
#print(table(HaltonIndex))
#print("x1 len HaltonIndex:")
#print(length(HaltonIndex))
#print("HaltonIndex[F[nF/2+1:nF]]:")
#print(HaltonIndex[F[((nF/2)+1):nF]])
HaltonIndex[F[((nF/2)+1):nF]] <- (BoxIndex + (I[2] - 1) * xlevel)
#print("BoxIndex + (I[2] - 1) * xlevel:")
#print(BoxIndex + (I[2] - 1) * xlevel)
#print("after HaltonIndex[F[nF/2+1:nF]]:")
#print(HaltonIndex[F[nF/2+1:nF]])
#print(" # 2 x1 table")
#print(HaltonIndex)
if(BoxIndex == 1){
print("table...:")
print(table(HaltonIndex))
}
#print("on exit len HaltonIndex:")
#print(length(HaltonIndex))
return(HaltonIndex)
}
#
res <- Partition2023(pop, its)
x1split <- function(x1pts, HaltonIndex, BoxIndex, xlevel, x1Hpts) {
skel <- "BoxIndex %s xlevel %s."
msg <- sprintf(skel, BoxIndex, xlevel)
print(msg)
# Determine points in box
inBox <- which(HaltonIndex == BoxIndex)
x1pts <- x1pts[inBox]
# Randomly remove one point (if needed)
#F <- which(inBox == TRUE)
F <- inBox
nF <- base::length(F)
print("x1 BoxIndex:")
print(BoxIndex)
print("x1 nF:")
print(nF)
#if(nF == 0){ return(HaltonIndex) }
#print("(nF %% 2):")
#print((nF %% 2))
print("len(b4 x1pts):")
print(length(x1pts))
if ((nF %% 2) == 1) {
r <- sample(nF, 1)
HaltonIndex[F[r]] <- NA
F <- F[-r]
nF <- (nF - 1)
x1pts <- x1pts[-r]
}
print("len(af x1pts):")
print(length(x1pts))
#if(nF == 0){ return(HaltonIndex) }
# Partition and update Halton indices
x1sort <- order(x1pts)
F <- F[x1sort]
Hpt1 <- x1Hpts[(BoxIndex + 1)]
Hpt2 <- x1Hpts[(BoxIndex + 1 + xlevel)]
I <- order(c(Hpt1, Hpt2))
#print("HaltonIndex[F[1:nF/2]]:")
#print(HaltonIndex[F[1:(nF/2)]])
HaltonIndex[F[1:(floor(nF/2))]] <- (BoxIndex + (I[1] - 1) * xlevel)
#print("x1 table")
#print(HaltonIndex)
#print(table(HaltonIndex))
HaltonIndex[F[((floor(nF/2))+1):nF]] <- (BoxIndex + (I[2] - 1) * xlevel)
#print("after HaltonIndex[F[nF/2+1:nF]]:")
#print(HaltonIndex[F[nF/2+1:nF]])
#print(" # 2 x1 table")
#print(HaltonIndex)
#print("table(HaltonIndex):")
#print(table(HaltonIndex))
if(BoxIndex == 1){
print("(BoxIndex + (I[1] - 1) * xlevel):")
print((BoxIndex + (I[1] - 1) * xlevel))
print("BoxIndex + (I[2] - 1) * xlevel:")
print(BoxIndex + (I[2] - 1) * xlevel)
print("nF/2:")
print(nF/2)
print("nF:")
print(nF)
#print("x1pts:")
#print(x1pts)
#exit(9999)
}
return(HaltonIndex)
}
x2split <- function(x2pts, HaltonIndex, BoxIndex, xlevel, x2Hpts) {
#print("in x2split:")
# Determine points in box
inBox <- which(HaltonIndex == BoxIndex)
x2pts <- x2pts[inBox]
# Randomly remove one or two points (if needed)
#F <- which(inBox == 1)
F <- inBox
#print("create F:")
#print(F)
nF <- base::length(F)
#print("x2 BoxIndex:")
#print(BoxIndex)
#print("x2 nF:")
#print(nF)
#if(nF ==0){ return(HaltonIndex)}
if ((nF %% 3) == 1) {
r <- sample(nF, 1)
HaltonIndex[F[r]] <- NA
F <- F[-r]
nF <- (nF - 1)
x2pts <- x2pts[-r]
} else if ((nF %% 3) == 2) {
r <- sample(nF, 1)
HaltonIndex[F[r]] <- NA
F <- F[-r]
nF <- (nF - 1)
x2pts <- x2pts[-r]
r <- sample(nF, 1)
HaltonIndex[F[r]] <- NA
F <- F[-r]
nF <- (nF - 1)
x2pts <- x2pts[-r]
}
#if(nF == 0){ return(HaltonIndex) }
# Partition and update Halton indices
x2sort <- order(x2pts)
#print("x2sort:")
#print((x2pts))
F <- F[x2sort]
#print("x2sort F:")
#print(F)
Hpt1 <- x2Hpts[(BoxIndex + 1)]
Hpt2 <- x2Hpts[(BoxIndex + 1 + xlevel)]
Hpt3 <- x2Hpts[(BoxIndex + 1 + (2 * xlevel))]
#print("Hpt:")
#print(Hpt1)
#print(Hpt2)
#print(Hpt3)
I <- order(c(Hpt1, Hpt2, Hpt3))
#print("I:")
#print(I)
#print("BoxIndex:")
#print(BoxIndex)
#print("xlevel:")
#print(xlevel)
#print("nF:")
#print(nF)
#print("nF/3:")
#print(nF/3)
#print("F[1:nF/3]:")
#print(F[1:(nF/3)])
#print("HaltonIndex[F[1:nF/3]]:")
#print(HaltonIndex[F[1:(nF/3)]])
HaltonIndex[F[1:(floor(nF/3))]] <- (BoxIndex + (I[1] - 1) * xlevel)
#print("x2 table")
#print(HaltonIndex)
#print(table(HaltonIndex))
#print(BoxIndex + (I[1] - 1) * xlevel)
HaltonIndex[F[((floor(nF/3))+1):(2*(floor(nF/3)))]] <- (BoxIndex + (I[2] - 1) * xlevel)
#print(" #2 x2 table")
#print(table(HaltonIndex))
#print(BoxIndex + (I[2] - 1) * xlevel)
#print("F:")
#print(F)
#print("b4 HaltonIndex:")
#print(HaltonIndex)
# what is happening in F?
HaltonIndex[F[((2*(floor(nF/3)))+1):nF]] <- (BoxIndex + (I[3] - 1) * xlevel)
#print(" #3 x2 table")
#print(table(HaltonIndex))
#print(BoxIndex + (I[3] - 1) * xlevel)
#print("HaltonIndex:")
#print(HaltonIndex)
return(HaltonIndex)
}
Partition2023 <- function(pts, its) {
# Initialize
N <- nrow(pts)
pts <- cbind(pts, 1:N)
Hpts <- HaltonPts(N)  # Assuming HaltonPts is a function that generates Halton points
#res <- cppRSHalton_br(n = N)
#Hpts <- res$pts
HaltonIndex <- rep(0, N)
# Partitioning parameters
xlevel <- c(1,2,6,12,24,72,144,432,864,1728,5184)
diml <- c(1,2,1,1, 2, 1, 2,  1,  1,  2,   1)
# Partitioning loop
for (j in (1:its)) {
#print("j:")
#print(j)
if (diml[j] == 1) {
fred1 <- (xlevel[j] - 1)
#print("fred1:")
#print(fred1)
for (i in 0:fred1) {
#print("1 i:")
#print(i)
HaltonIndex1 <- x1split(pts[,1], HaltonIndex, i, xlevel[j], Hpts[,1])
HaltonIndex <- HaltonIndex1
#print("x1-HaltonIndex:")
#print(HaltonIndex)
}
} else {
fred2 <- (xlevel[j] - 1)
#print("fred2:")
#print(fred2)
for (i in 0:fred2) {
#if (fred2 < 1) {break}
#print("2 i:")
#print(i)
HaltonIndex <- x2split(pts[,2], HaltonIndex, i, xlevel[j], Hpts[,2])
#print("x2-HaltonIndex:")
#print(HaltonIndex)
}
}
# Remove discarded points
TF <- which(!is.na(HaltonIndex))
HaltonIndex <- HaltonIndex[TF]
#print("-HaltonIndex:")
#print(HaltonIndex)
pts <- pts[TF,]
}
ptsIndex <- pts[,3]
return(list(ptsIndex = ptsIndex, HaltonIndex = HaltonIndex))
}
IndexPerm2022 <- function(its) {
# Partitioning parameters
diml <- c(1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1)
diml <- diml[1:its]
# Halton Indices
b1 <- 2
b2 <- 3
J1 <- sum(diml == 1)
J2 <- sum(diml == 2)
B <- (b1^J1) * (b2^J2)
HIM <- matrix(0, nrow = (b2^J2), ncol = (b1^J1))
H <- HaltonPts(B)
#print("B:")
#print(B)
#print("J1:")
#print(J1)
#print("J2:")
#print(J2)
#Hindex <- floor(rbind((b1^(J1) + 1e-12) * H[,1], (b2^(J2) + 1e-12) * H[,2])) + 1
Hindex <- floor(rbind((b1^(J1) + 1e-12) * H[,1], (b2^(J2) + 1e-12) * H[,2])) + 1
Hindex <- t(Hindex)
print("Hindex:")
print(Hindex)
# Halton Matrix
for (i in 0:(B - 1)) {
HIM[((b2^J2) + 1) - Hindex[(i + 1), 2], Hindex[(i + 1), 1]] <- i
#HIM[b2^J2 + 1 - Hindex[2, i + 1], Hindex[1, i + 1]] <- i
}
print("HIM:")
print(HIM)
# Permutated Halton Matrix
step2 <- c(2, 4, 8, 16, 32, 64, 128, 256)
step3 <- c(3, 9, 27, 81, 243)
order2 <- c((sample(2) - 1), rep(NA, ((b1^J1) - b1)))
print("order2:")
print(order2)
order3 <- c((sample(3) - 1), rep(NA, ((b2^J2) - b2)))
print("order3:")
print(order3)
print("J1:")
print(J1)
for (i in 1:(J1 - 1)) {
if (J1 < 2) {break}
v <- vector()
L <- sum(!is.na(order2))
print("L order2:")
print(L)
for (j in (1:L)) {
k <- order2[j]
P <- (sample(2) - 1)
s <- step2[i]
v <- c(v, (k + s * P[1]), (k + s * P[2]))
print("v in loop:")
print(v)
}
print("order2 v:")
print(v)
order2[1:base::length(v)] <- v
print("order2:")
print(order2)
}
for (i in 1:(J2 - 1)) {
if (J2 < 2) {break}
v <- vector()
L <- sum(!is.na(order3))
#print("L order3:")
#print(L)
for (j in (1:L)) {
#print("j:")
#print(j)
k <- order3[j]
#print("k:")
#print(k)
P <- (sample(3) - 1)
#print("P:")
#print(P)
#print("i====")
#print(i)
#print("step3===")
#print(step3)
s <- step3[i]
#print("s:")
#print(s)
v <- c(v, (k + s * P[1]),  (k + s * P[2]),  (k + s * P[3]))
#print("v:")
#print(v)
}
print("order3 v:")
print(v)
order3[1:base::length(v)] <- v
print("order3:")
print(order3)
}
# Transform the matrix
b2vals <- (HIM[1,] %% (b1^J1))
b3vals <- (HIM[,1] %% (b2^J2))
I2 <- vector()
for (i in 1:(b1^J1)) {
F <- which(b2vals == order2[i])
I2 <- c(I2, F)
}
I3 <- vector()
for (i in 1:(b2^J2)) {
F <- which(b3vals == order3[i])
I3 <- c(I3, F)
}
permHIM <- HIM[I3, I2]
permHaltonIndex <- rep(0, B)
for (i in 0:(B - 1)) {
permHaltonIndex[i + 1] <- permHIM[which(HIM == i)]
}
return(list(permHaltonIndex = permHaltonIndex, B = B))
}
HaltonPts <- function(n) {
# Initialize
bases <- c(2, 3)
pts <- matrix(0, nrow = n, ncol = 2)
for (ii in (1:n)) {
for (i in (1:2)) {
k <- (ii - 1)
j <- 1
xk <- (k %% bases[i]) * (1 / bases[i])
while (floor(k / (bases[i] ^ (j))) > 0) {
xk <- xk + (floor(k / (bases[i] ^ (j))) %% bases[i]) * (1 / (bases[i] ^ (j + 1)))
j <- (j + 1)
}
pts[ii, i] <- xk
}
}
return(pts)
}
hip2023 <- function(pop, n, its) {
# Partition the population
partitionResult <- Partition2023(pop, its)
popIndex <- partitionResult$ptsIndex
HaltonIndex <- partitionResult$HaltonIndex
# Random permutation of Halton indices
permResult <- IndexPerm2022(its)
permHaltonIndex <- permResult$permHaltonIndex
B <- permResult$B
Order <- rep(0, length(HaltonIndex))
for (i in 0:(B - 1)) {
Order[which(HaltonIndex == i)] <- permHaltonIndex[i + 1]
}
print("table(HaltonIndex):")
print(table(HaltonIndex))
# Assign unique indices
ptsInBox <- (length(HaltonIndex) / B)
if (ptsInBox > 1) {
for (i in 0:(B - 1)) {
F <- which(Order == i)
Order[F] <- (i + B * (sample(ptsInBox) - 1))
}
}
# Sample Indices
sampleI <- rep(1, n)
for (i in (1:n)) {
sampleI[i] <- popIndex[which(Order == (i - 1))]
}
return(list(sampleI = sampleI, popIndex = popIndex, Order = Order))
}
# HIP2023(rand(5000,2), 20, 7)
set.seed(1)
pop <- matrix(runif(5000*2), nrow = 5000, ncol = 2)
n <- 20
its <- 7
#
res <- Partition2023(pop, its)
HaltonIndex <- res[[2]]
table(HaltonIndex)
hip <- hip2023(pop, n, its)
pop <- matrix(runif(24*2), nrow = 24, ncol = 2)
n <- 10
its <- 2
hip <- hip2023(pop, n, its)
