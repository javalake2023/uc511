stat = "sf_coordinates"
) +
scale_color_manual(values = c("black", "red"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "First 50 sites from Canterbury Halton Frame.")
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
BAS_sites$sample
plot(shp)
plot(BAS_sites$sample)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
BAS_sites$sample
BAS_sites$seed
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
library(uc511)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
## Using default bounding box of BC Marine Master Sample and that random seed.
BAS_sites <- uc511::BAS(shapefile = shp, n = 25)
load("/home/phil/uc511_Support_Material/toyExample.Rda")
shp
bb <- uc511::BoundingBox(shp)
area <- sf::st_area(x)
area <- sf::st_area(shp)
area
#   Find fraction of the square Halton box covered by the polygons
p <- min(1, area / max(diff(t(bb)))^2 )
t(bb)
diff(t(bb))
?diff
max(diff(t(bb)))^2
(diff(t(bb)))
max((t(bb)))^2
max((t(bb)))
((t(bb)))
#   Find bounding box around everything
bb <- sp::bbox( x )
bb <- sp::bbox( shp )
shp
my_sp_polygon <- as(shp, "Spatial")
bb <- sp::bbox( my_sp_polygon )
bb
#   Find fraction of the square Halton box covered by the polygons
p <- min(1, area / max(diff(t(bb)))^2 )
p
my.dim <- 2 # number of dimensions we are sampling. leave this here
my.dim <- 2 # number of dimensions we are sampling. leave this here
#   Make sure there is a non-missing attribute associated with each polygon in x.
#   This is because over() extracts attributes of x, and missingness is used
#   to flag which points are outside a polygon.
if( inherits(shp, "SpatialPolygonsDataFrame") ){
#   x has a data frame
df <- data.frame( sampleID=1:length(shp), geometryID=row.names(shp), data.frame(shp) )
} else {
df <- data.frame( sampleID=1:length(shp), geometryID=row.names(shp),  row.names=row.names(shp) )
}
row.names(shp)
my.dim <- 2 # number of dimensions we are sampling. leave this here
#   Make sure there is a non-missing attribute associated with each polygon in x.
#   This is because over() extracts attributes of x, and missingness is used
#   to flag which points are outside a polygon.
if( inherits(my_sp_polygon, "SpatialPolygonsDataFrame") ){
#   x has a data frame
df <- data.frame( sampleID=1:length(my_sp_polygon), geometryID=row.names(my_sp_polygon), data.frame(my_sp_polygon) )
} else {
df <- data.frame( sampleID=1:length(my_sp_polygon), geometryID=row.names(my_sp_polygon),  row.names=row.names(my_sp_polygon) )
}
x <- SpatialPolygonsDataFrame( my_sp_polygon, data=df )
x <- sp::SpatialPolygonsDataFrame( my_sp_polygon, data=df )
x
crs.obj <- CRS(proj4string(x))
crs.obj <- sf::CRS(proj4string(x))
crs.obj <- sp::CRS(proj4string(x))
#   Draw initial random start, but make sure the first point is inside the study area.
q <- 1 - p
z <- qnorm(0.90)
n.init <- (1 / p) + (q*z*z/(2*p)) + (z / p)*sqrt(z*z*q*q/4 + q*1)  # term in sqrt is >0 because we have control on all terms
n.init <- ceiling(n.init)
n.init
# Compute bounding box around x. If you want a non-square surrounding x
# set d.box to c(delta.x, delta.y)
d.box <- rep(max(diff(t(bb))), 2)
xl <- bb[1,"min"]
xr <- bb[1,"min"] + d.box[1]
yl <- bb[2,"min"]
yu <- bb[2,"min"] + d.box[2]
bas.bbox <- matrix( c(xl,yl,xr,yu), 2)
dimnames(bas.bbox) <- list(coordnames(x),c("min","max"))
dimnames(bas.bbox) <- list(sp::coordnames(x),c("min","max"))
bas.bbox
remotes::install_github("tmcd82070/SDraw")
library(SDraw)
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init),
proj4string=crs.obj )
in.poly <- over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
#
if (exists("maxU", envir = .GlobalEnv, mode="function")) {
max.u <- get( "maxU", envir=.GlobalEnv, mode="function" )
max.u <- max.u()
} else {
max.u <- SDraw::maxU()
}
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init),
proj4string=crs.obj )
in.poly <- over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
proj4string(x)
crs.obj <- sf::st_crs(proj4string(x))
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init),
proj4string=crs.obj )
in.poly <- over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init),
proj4string=sf::st_crs(crs_obj)$proj4string )
in.poly <- over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
crs.obj <- sf::st_crs(proj4string(x))
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init),
proj4string=sf::st_crs(crs_obj)$proj4string )
in.poly <- over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init),
proj4string=sf::st_crs(crs.obj)$proj4string )
in.poly <- over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init),
proj4string=sf::st_crs(crs.obj)$proj4string )
sf::st_crs(crs.obj)$proj4string
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init))
halt.pts
in.poly <- over( halt.pts, x )
crs.obj <- sf::st_crs(proj4string(my_sp_polygon))
dimnames(bas.bbox) <- list(sp::coordnames(my_sp_polygon),c("min","max"))
bas.bbox
in.poly <- over( halt.pts, my_sp_polygon )
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init),
proj4string=sf::st_crs(crs.obj)$proj4string )
halt.pts
?`over,Spatial,Spatial-method`
my_sp_polygon
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init))
#proj4string=sf::st_crs(crs.obj)$proj4string )
halt.pts <- sf::st_set_crs(halt.pts, crs.obj)
#proj4string=sf::st_crs(crs.obj)$proj4string )
# Assign the CRS to your SpatialPointsDataFrame
sp::proj4string(halt.pts) <- sp::CRS(sf::st_crs(crs.obj)$proj4string)
in.poly <- sp::over( halt.pts, my_sp_polygon )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init))
#proj4string=sf::st_crs(crs.obj)$proj4string )
# Assign the CRS to your SpatialPointsDataFrame
sp::proj4string(halt.pts) <- sp::CRS(sf::st_crs(crs.obj)$proj4string)
in.poly <- sp::over( halt.pts, my_sp_polygon )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
load("/home/phil/uc511_Support_Material/toyExample.Rda")
#bb <- uc511::BoundingBox(shp)
my_sp_polygon <- as(shp, "Spatial")
bb <- sp::bbox( my_sp_polygon )
bb
area <- sf::st_area(shp)
area
#   Find fraction of the square Halton box covered by the polygons
p <- min(1, area / max(diff(t(bb)))^2 )
p
my.dim <- 2 # number of dimensions we are sampling. leave this here
#   Make sure there is a non-missing attribute associated with each polygon in x.
#   This is because over() extracts attributes of x, and missingness is used
#   to flag which points are outside a polygon.
if( inherits(my_sp_polygon, "SpatialPolygonsDataFrame") ){
#   x has a data frame
df <- data.frame( sampleID=1:length(my_sp_polygon), geometryID=row.names(my_sp_polygon), data.frame(my_sp_polygon) )
} else {
df <- data.frame( sampleID=1:length(my_sp_polygon), geometryID=row.names(my_sp_polygon),  row.names=row.names(my_sp_polygon) )
}
x <- sp::SpatialPolygonsDataFrame( my_sp_polygon, data=df )
x
crs.obj <- sf::st_crs(proj4string(my_sp_polygon))
crs.obj <- sf::st_crs(sp::proj4string(my_sp_polygon))
#   Draw initial random start, but make sure the first point is inside the study area.
q <- 1 - p
z <- qnorm(0.90)
n.init <- (1 / p) + (q*z*z/(2*p)) + (z / p)*sqrt(z*z*q*q/4 + q*1)  # term in sqrt is >0 because we have control on all terms
n.init <- ceiling(n.init)
n.init
# Compute bounding box around x. If you want a non-square surrounding x
# set d.box to c(delta.x, delta.y)
d.box <- rep(max(diff(t(bb))), 2)
xl <- bb[1,"min"]
xr <- bb[1,"min"] + d.box[1]
yl <- bb[2,"min"]
yu <- bb[2,"min"] + d.box[2]
bas.bbox <- matrix( c(xl,yl,xr,yu), 2)
dimnames(bas.bbox) <- list(sp::coordnames(x),c("min","max"))
bas.bbox
#
if (exists("maxU", envir = .GlobalEnv, mode="function")) {
max.u <- get( "maxU", envir=.GlobalEnv, mode="function" )
max.u <- max.u()
} else {
max.u <- SDraw::maxU()
}
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init))
#proj4string=sf::st_crs(crs.obj)$proj4string )
# Assign the CRS to your SpatialPointsDataFrame
sp::proj4string(halt.pts) <- sp::CRS(sf::st_crs(crs.obj)$proj4string)
in.poly <- sp::over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
library(sp)
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init))
#proj4string=sf::st_crs(crs.obj)$proj4string )
# Assign the CRS to your SpatialPointsDataFrame
sp::proj4string(halt.pts) <- sp::CRS(sf::st_crs(crs.obj)$proj4string)
in.poly <- sp::over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
halt.pts
# Keep first that is in a polygon
which.pt.in <- which(keep)[1]  # or min(which(keep))
m <- m[which.pt.in,]
halt.pts <- halt.pts[which.pt.in,]
halt.pts
#   Take initial number of Halton numbers that is approximately correct
#   This is number of samples to take to be Alpha% sure that we get n
#   points in the study area.  99% of time this loop runs once.
#   At this point, halt.pts has one point in it.
q <- 1 - p
z <- qnorm(0.99)
halt.start <- m  # save for attributes later
n.cur <- n
# Keep first that is in a polygon
which.pt.in <- which(keep)[1]  # or min(which(keep))
m <- m[which.pt.in,]
# Find first Halton point after random start that is in polygon
repeat{
m <- floor( runif( n.init*my.dim, min=0, max=max.u+1 ))
m <- matrix(m,n.init,my.dim)
halt.samp <- matrix(NA, n.init, my.dim)
for(i in 1:n.init){
halt.samp[i,] <- SDraw::halton( 1, dim=my.dim, start=m[i,] )
}
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#  cat("dim halt.samp : "); cat(nrow(halt.samp)); cat("\n")
#  cat(paste("n.init=",n.init,"\n"))
halt.pts <- SpatialPointsDataFrame(halt.samp, data=data.frame(sampleID=1:n.init))
#proj4string=sf::st_crs(crs.obj)$proj4string )
# Assign the CRS to your SpatialPointsDataFrame
sp::proj4string(halt.pts) <- sp::CRS(sf::st_crs(crs.obj)$proj4string)
in.poly <- sp::over( halt.pts, x )
keep <- !is.na( in.poly$sampleID )
if(any(keep)) break
}
# Keep first that is in a polygon
which.pt.in <- which(keep)[1]  # or min(which(keep))
m <- m[which.pt.in,]
m
halt.pts <- halt.pts[which.pt.in,]
#   Take initial number of Halton numbers that is approximately correct
#   This is number of samples to take to be Alpha% sure that we get n
#   points in the study area.  99% of time this loop runs once.
#   At this point, halt.pts has one point in it.
q <- 1 - p
z <- qnorm(0.99)
halt.start <- m  # save for attributes later
n.cur <- n
n <- 25
n.cur <- n
repeat{
n.init <- (n.cur / p) + (q*z*z/(2*p)) + (z / p)*sqrt(z*z*q*q/4 + q*n.cur)  # term in sqrt is >0 because we have control on all terms
n.init <- ceiling(n.init)
halt.samp <- SDraw::halton( n.init, dim=my.dim, start=m+1 )
#   Convert from [0,1] to a square box covering [bb]
halt.samp <- bas.bbox[,"min"] + t(halt.samp) * d.box
halt.samp <- t(halt.samp)
#   Check which are in the polygon, after first converting halt.samp to SpatialPoints
#   And adding to points from previous iteration
#   sampleID in this data frame gets overwritten below when assign to @data
crds <- rbind(coordinates(halt.pts), halt.samp)
halt.pts <- SpatialPointsDataFrame(crds,
data=data.frame(sampleID=1:nrow(crds)))
#proj4string = crs.obj)
sp::proj4string(halt.pts) <- sp::CRS(sf::st_crs(crs.obj)$proj4string)
in.poly <- over( halt.pts, x )
#   Reject the points outside the polygon, and attach other attributes if present
keep <- !is.na( in.poly$sampleID )  # in.poly$sampleID is row num of polygon in x
if( sum(keep) >= n ){
break
} else {
n.cur <- n - sum(keep)
m <- m + n.init  # place in Halton sequence to start next iter minus one (+1 added above in call to Halton)
}
}
halt.pts
# Attach attributes
halt.pts@data <- data.frame( in.poly )
halt.pts <- halt.pts[ keep, ]
halt.pts <- halt.pts[1:n,]
halt.pts$sampleID <- 1:n   # renumber the site ID's because some (those outside polygon) were tossed above
attr(halt.pts, "frame") <- deparse(substitute(x))
attr(halt.pts, "frame.type") <- "polygon"
attr(halt.pts, "sample.type") <- "BAS"
attr(halt.pts, "random.start") <- halt.start
attr(halt.pts, "bas.bbox") <- bas.bbox
halt.pts
plot(halt.pts)
