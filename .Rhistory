olPanel_3 <- uc511::getOverlappedPoints(BASOverlappingPanels, panelid)
olPanel_3
# Plot using ggplot2
ex6 <- sf::st_as_sf(shp.cant, coords = c("longitude", "latitude"))
ggplot() +
geom_sf() +
geom_sf(data = ex6, size = 4, shape = 23) +
geom_jitter(width = 10, height = 10) +
geom_point(data = sf::st_jitter(olPanel_1$sample, 0.05),
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Panel-1"),
stat = "sf_coordinates"
) +
geom_point(data = sf::st_jitter(olPanel_2$sample, 0.05),
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Panel-2"),
stat = "sf_coordinates"
) +
geom_point(data = olPanel_3$sample,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Panel-3"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"green"),
name = "Overlapped Panels") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Spatially balanced sample using a overlapping panel \ndesign, of three panels, each containing 20 survey sites.",
subtitle = "Total of 51 survey sites from Canterbury, New Zealand. Panel Overlap = (0, 4, 5)",
caption = "uc511 Overlapping Panel Design.")
# create/update files in man directory
devtools::document()
library(pkgdown)
pkgdown::build_site()
panels <- c(20, 20, 20)
panel_overlap <- c(0, 5, 5)
samp3 <- uc511::HaltonFrame(shapefile = shp.cant,
panels = panels,
panel_overlap = panel_overlap,
J = c(4, 3))
samp3$sample
library(uc511)
panels <- c(20, 20, 20)
panel_overlap <- c(0, 5, 5)
samp3 <- uc511::HaltonFrame(shapefile = shp.cant,
panels = panels,
panel_overlap = panel_overlap,
J = c(4, 3))
diff_pts
diff_pts_sf
samp3$sample
library(uc511)
panels <- c(20, 20, 20)
panel_overlap <- c(0, 5, 5)
samp3 <- uc511::HaltonFrame(shapefile = shp.cant,
panels = panels,
panel_overlap = panel_overlap,
J = c(4, 3))
samp3$sample
# samp3$sample has POINTs with panel_id's.
# - need panel_id's to be sorted before assigning panel numbers.
sample_3 <- samp3$sample
sample_3
panelid <- 1
olPanel_1 <- uc511::getOverlappedPoints(sample_3, panelid)
panelid <- 2
olPanel_2 <- uc511::getOverlappedPoints(sample_3, panelid)
panelid <- 3
olPanel_3 <- uc511::getOverlappedPoints(sample_3, panelid)
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_jitter(width = 10, height = 10) +
geom_point(data = sf::st_jitter(olPanel_1$sample, 0.05),
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Panel-1"),
stat = "sf_coordinates"
) +
geom_point(data = sf::st_jitter(olPanel_2$sample, 0.05),
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Panel-2"),
stat = "sf_coordinates"
) +
geom_point(data = olPanel_3$sample,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Panel-3"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"green"),
name = "Overlapped Panels") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame sample using a overlapping panel \ndesign, of three panels, each containing 20 survey sites.",
subtitle = "Total of 50 survey sites from Canterbury, New Zealand. Panel Overlap = (0, 5, 5)",
caption = "uc511 Halton Frame Overlapping Panel Design.")
library(uc511)
library(uc511)
# total number of sample points required.
n <- 50
# Generate a spatially balanced sample from a Halton Frame using a Random start.
# ***** Note: new parameter - randomStart - default value FALSE.
Frame <- uc511::HaltonFrame(n = n,
J = c(4, 3),
shapefile = shp.cant,
randomStart = TRUE)
sample_4 <- Frame$sample
sample_4
library(uc511)
# total number of sample points required.
n <- 50
# Generate a spatially balanced sample from a Halton Frame using a Random start.
# ***** Note: new parameter - randomStart - default value FALSE.
Frame <- uc511::HaltonFrame(n = n,
J = c(4, 3),
shapefile = shp.cant,
randomStart = TRUE)
diff_pts
df_sorted
duplicated_pts <- base::c(df_sorted, df_sorted)
duplicated_pts
df_sorted <- sf::st_as_sf(df_sorted)
df_sorted
duplicated_pts <- base::c(df_sorted, df_sorted)
duplicated_pts
duplicated_pts <- base::c(df_sorted[1:139], df_sorted[1:139])
df_sorted
duplicated_pts <- base::c(diff_pts[1:n], diff_pts[1:n])
duplicated_pts <- base::c(diff_pts[1:n,], diff_pts[1:n,])
duplicated_pts <- base::c(df_sorted[1:139,], df_sorted[1:139,])
duplicated_pts
duplicated_pts <- sf::st_as_sf(base::c(df_sorted[1:139,], df_sorted[1:139,]))
duplicated_pts <- base::c(sf::st_as_sf(df_sorted[1:139,]), sf::st_as_sf(df_sorted[1:139,]))
duplicated_pts
df_sorted
dp = rbind(df_sorted, df_sorted)
dp
library(uc511)
# total number of sample points required.
n <- 50
# Generate a spatially balanced sample from a Halton Frame using a Random start.
# ***** Note: new parameter - randomStart - default value FALSE.
Frame <- uc511::HaltonFrame(n = n,
J = c(4, 3),
shapefile = shp.cant,
randomStart = TRUE)
library(uc511)
# total number of sample points required.
n <- 50
# Generate a spatially balanced sample from a Halton Frame using a Random start.
# ***** Note: new parameter - randomStart - default value FALSE.
Frame <- uc511::HaltonFrame(n = n,
J = c(4, 3),
shapefile = shp.cant,
randomStart = TRUE)
duplicated_pts
length(duplicated_pts)
lengths(duplicated_pts)
lengths(duplicated_pts$ID)
length(duplicated_pts$ID)
base::sample(1:length(duplicated_pts$ID), 1)
base::sample(1:length(duplicated_pts$ID), 1)
base::sample(1:length(duplicated_pts$ID), 1)
base::sample(1:length(duplicated_pts$ID), 1)
random_start_point <- base::sample(1:length(duplicated_pts$ID), 1)
base::seq(random_start_point, (random_start_point + n) - 1, 1)
random_start_point
duplicated_pts[sample_indices]
duplicated_pts[sample_indices,]
library(uc511)
# total number of sample points required.
n <- 50
# Generate a spatially balanced sample from a Halton Frame using a Random start.
# ***** Note: new parameter - randomStart - default value FALSE.
Frame <- uc511::HaltonFrame(n = n,
J = c(4, 3),
shapefile = shp.cant,
randomStart = TRUE)
sample_4 <- Frame$sample
sample_4
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_jitter(width = 10, height = 10) +
geom_point(data = sample_4,
aes(geometry = geometry,
x = after_stat(x),
y = after_stat(y), colour= "Sample"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"green"),
name = "Random Start") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame spatially balanced sample randomly drawn from the frame.",
subtitle = "Total of 50 survey sites from Canterbury, New Zealand.",
caption = "uc511 Halton Frame Random Start Design.")
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_jitter(width = 10, height = 10) +
geom_point(data = sample_4,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Sample"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"green"),
name = "Random Start") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame spatially balanced sample randomly drawn from the frame.",
subtitle = "Total of 50 survey sites from Canterbury, New Zealand.",
caption = "uc511 Halton Frame Random Start Design.")
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
#geom_jitter(width = 10, height = 10) +
geom_text(data = sample_4,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = sample_4,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Sample"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"green"),
name = "Random Start") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame spatially balanced sample randomly drawn from the frame.",
subtitle = "Total of 50 survey sites from Canterbury, New Zealand.",
caption = "uc511 Halton Frame Random Start Design.")
library(uc511)
# total number of sample points required.
n <- 50
# Generate a spatially balanced sample from a Halton Frame using a Random start.
# ***** Note: new parameter - randomStart - default value FALSE.
Frame <- uc511::HaltonFrame(n = n,
J = c(4, 3),
shapefile = shp.cant,
randomStart = TRUE)
sample_4 <- Frame$sample
sample_4
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
#geom_jitter(width = 10, height = 10) +
geom_text(data = sample_4,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = sample_4,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Sample"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"green"),
name = "Random Start") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame spatially balanced sample randomly drawn from the frame.",
subtitle = "Total of 50 survey sites from Canterbury, New Zealand.",
caption = "uc511 Halton Frame Random Start Design.")
sample_4
library(uc511)
# the other parameter is bases, it defaults to c(2, 3)
Frame <- uc511::HaltonFrame(shapefile = shp.cant, J = c(3, 2))
# get data from our sample
cant_pts <- Frame$sample
# get data for the Halton frame.
hf_pts <- sf::st_cast(Frame$pts.shp, "POINT")
hf_pts <- sf::st_as_sf(hf_pts)
hf_pts$ID <- seq(1, length(hf_pts$x))
# plot1 : hf_pts - Halton frame over Canterbury Region.
plot1 <- ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = hf_pts,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = hf_pts,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red", "black"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "A Halton frame, B = 2^3 * 3^2, over Canterbury, New Zealand.",
subtitle = "A total of 432 points.",
caption = "uc511 Halton Frame example.")
# plot2 : cant_pts - Canterbury Region.
plot2 <- ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = cant_pts,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = cant_pts,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red", "black"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "A Halton frame, B = 2^3 * 3^2, over Canterbury, New Zealand.",
subtitle = "Showing sample points within the Canterbury shapefile.",
caption = "uc511 Halton Frame example.")
# Arrange the plots side by side.
grid.arrange(plot1, plot2, ncol = 2)
cant_pts$uc511SeqID
cant_pts$ID
# the number of sample points we want returned.
n <- 20
# the other parameter is bases, it defaults to c(2, 3)
samp2 <- uc511::HaltonFrame(shapefile = shp.cant,
n = n,
J = c(4, 3))
# get our sample.
sample_2 <- samp2$sample
# example 2 : sample_2 - First 20 points from Canterbury Region Halton frame.
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_text(data = sample_2[1:n,], #df_sorted[1:n,],
size = 2,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = sample_2[1:n,], #df_sorted[1:n,],
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Samples"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red", "black"),
name = "Legend") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "A Halton frame, B = 2^3 * 3^2, over Canterbury, New Zealand.",
subtitle = "Showing sample points within the Canterbury shapefile.",
caption = "uc511 Halton Frame example.")
sample_2$ID
sample_2$uc511SeqID
panels <- c(20, 20, 20)
panel_overlap <- c(0, 5, 5)
samp3 <- uc511::HaltonFrame(shapefile = shp.cant,
panels = panels,
panel_overlap = panel_overlap,
J = c(4, 3))
# samp3$sample has POINTs with panel_id's.
# - need panel_id's to be sorted before assigning panel numbers.
sample_3 <- samp3$sample
sample_3
panelid <- 1
olPanel_1 <- uc511::getOverlappedPoints(sample_3, panelid)
panelid <- 2
olPanel_2 <- uc511::getOverlappedPoints(sample_3, panelid)
panelid <- 3
olPanel_3 <- uc511::getOverlappedPoints(sample_3, panelid)
# Plot using ggplot2
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
geom_jitter(width = 10, height = 10) +
geom_point(data = sf::st_jitter(olPanel_1$sample, 0.05),
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Panel-1"),
stat = "sf_coordinates"
) +
geom_point(data = sf::st_jitter(olPanel_2$sample, 0.05),
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Panel-2"),
stat = "sf_coordinates"
) +
geom_point(data = olPanel_3$sample,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Panel-3"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"green"),
name = "Overlapped Panels") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame sample using a overlapping panel \ndesign, of three panels, each containing 20 survey sites.",
subtitle = "Total of 50 survey sites from Canterbury, New Zealand. Panel Overlap = (0, 5, 5)",
caption = "uc511 Halton Frame Overlapping Panel Design.")
sample_3$ID
sample_3$uc511SeqID
# total number of sample points required.
n <- 50
# Generate a spatially balanced sample from a Halton Frame using a Random start.
# ***** Note: new parameter - randomStart - default value FALSE.
Frame <- uc511::HaltonFrame(n = n,
J = c(4, 3),
shapefile = shp.cant,
randomStart = TRUE)
sample_4 <- Frame$sample
sample_4
ggplot() +
geom_sf() +
geom_sf(data = canterbury, size = 4, shape = 23) +
#geom_jitter(width = 10, height = 10) +
geom_text(data = sample_4,
size = 3,
aes(label = ID,
vjust = -0.5,
geometry = x,
x = after_stat(x),
y = after_stat(y), color = "ID"),
stat = "sf_coordinates") +
geom_point(data = sample_4,
aes(geometry = x,
x = after_stat(x),
y = after_stat(y), colour= "Sample"),
stat = "sf_coordinates"
) +
scale_color_manual(values = c("red",
"blue",
"green"),
name = "Random Start") +  # Define color scale and legend title
labs(x = "Latitude",
y = "Longitude",
title = "Halton Frame spatially balanced sample randomly drawn from the frame.",
subtitle = "Total of 50 survey sites from Canterbury, New Zealand.",
caption = "uc511 Halton Frame Random Start Design.")
sample_4$ID
sample_4$uc511SeqID
# create/update files in man directory
devtools::document()
sf_object <- sf::st_read(system.file("shape/nc.shp", package="sf"))
sf_object
bb <- uc511::getBB()
uc511::makeFrame(J = c(8,4), bb = bb)
library(uc511)
library(uc511)
# create/update files in man directory
devtools::document()
pkgdown::build_site()
data(NS_bioregion)
library(BASMasterSample)
data(NS_bioregion)
# Vertically aligned master sample bounding box.
bb <- uc511::BoundingBox(shp = NS_bioregion)
# Actual bounding box.
bb.rot <- uc511::rotate.shp(bb, bb, back = TRUE)
plot(sf::st_geometry(NS_bioregion))
plot(sf::st_geometry(bb.rot), add = TRUE)
library(bcmaps)
library(bcmapsdata)
cities <- bcmaps::get_layer("bc_cities")
bb <- uc511::BoundingBox(cities, d = 2, FALSE)
# For visibility will make boxes 10 km
cities.ord <- uc511::getIndividualBoxIndices(pts = cities, bb = bb, size = 100)
plot(st_geometry(cities), pch = 20)
plot(st_geometry(cities.ord[rank(cities.ord$HaltonIndex) < 15,]), add= TRUE, col = "red", cex = 1.5)
pts <- uc511::cppRSHalton(n = 10)
bb <- uc511::getBB()
pts.shp <- uc511::rotate.scale.coords(coords = pts, bb)
plot(pts.shp)
